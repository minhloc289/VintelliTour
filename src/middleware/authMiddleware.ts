import { NextRequest, NextResponse } from "next/server";
import { jwtVerify } from "jose";

export interface AuthRequest extends NextRequest {
  user?: {
    userId: string;
  };
}

export async function authMiddleware(req: NextRequest) {
  try {
    // ƒê∆∞·ªùng d·∫´n kh√¥ng c·∫ßn x√°c th·ª±c
    const publicPaths = [
      "/api/auth/login", 
      "/api/auth/register", 
      "/login", "/register", "/",
      "/admin/locations", 
      "/admin-login"
    ];
    const path = req.nextUrl.pathname;
    
    // N·∫øu l√† ƒë∆∞·ªùng d·∫´n public th√¨ cho ƒëi ti·∫øp
    if (publicPaths.includes(path)) {
      return NextResponse.next();
    }
    
    
    // üëâ N·∫øu ƒë∆∞·ªùng d·∫´n l√† /admin th√¨ ki·ªÉm tra token admin ri√™ng bi·ªát
    if (path.startsWith("/admin")) {
      const adminToken = req.cookies.get("admin_auth_token")?.value;
      console.log("[middleware] admin_auth_token:", adminToken);
      if (!adminToken) {
        return NextResponse.redirect(new URL("/admin-login", req.url));
      }

      try {
        const adminSecret = new TextEncoder().encode(process.env.JWT_SECRET);
        await jwtVerify(adminToken, adminSecret); // N·∫øu kh√¥ng throw l√† h·ª£p l·ªá
        return NextResponse.next();
      } catch (err) {
        return NextResponse.redirect(new URL("/admin-login", req.url));
      }
    }

    // L·∫•y token t·ª´ cookie
    const token = req.cookies.get("auth_token")?.value;
    if (!token) {
      // N·∫øu l√† API request, tr·∫£ v·ªÅ l·ªói 401
      if (path.startsWith("/api/")) {
        return new NextResponse(
          JSON.stringify({ message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p" }),
          { status: 401, headers: { "content-type": "application/json" } }
        );
      }
      
      // N·∫øu l√† page request, chuy·ªÉn h∆∞·ªõng v·ªÅ trang login
      return NextResponse.redirect(new URL("/login", req.url));
    }
    
    // Ki·ªÉm tra token h·ª£p l·ªá
    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
    const { payload } = await jwtVerify(token, secret);
    
    // T·∫°o request m·ªõi v·ªõi th√¥ng tin user
    const requestHeaders = new Headers(req.headers);
    requestHeaders.set("x-user-id", payload.userId as string);
    
    // Tr·∫£ v·ªÅ response v·ªõi headers m·ªõi
    return NextResponse.next({
      request: {
        headers: requestHeaders,
      },
    });
    
  } catch (error) {
    // N·∫øu token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
    const path = req.nextUrl.pathname;
    if (path.startsWith("/admin")) {
      return NextResponse.redirect(new URL("/admin-login", req.url));
    }
    
    // N·∫øu l√† API request, tr·∫£ v·ªÅ l·ªói 401
    if (path.startsWith("/api/")) {
      return new NextResponse(
        JSON.stringify({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" }),
        { status: 401, headers: { "content-type": "application/json" }   }
      );
    }
    
    // N·∫øu l√† page request, chuy·ªÉn h∆∞·ªõng v·ªÅ tra ng login
    return NextResponse.redirect(new URL("/login", req.url));
  }
}

// ƒê·ªÉ s·ª≠ d·ª•ng middleware n√†y, t·∫°o file middleware.ts ·ªü th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
// V·ªõi n·ªôi dung:
// export { authMiddleware as middleware } from "./path/to/authMiddleware";