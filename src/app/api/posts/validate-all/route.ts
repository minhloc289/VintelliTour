import { NextResponse } from 'next/server';
import clientPromise from '@/lib/mongodb';
import axios from 'axios';
import { franc } from 'franc';
import { ObjectId } from 'mongodb';

enum ContentViolationType {
  HATE_SPEECH = 'hate_speech',
  SEXUAL = 'sexual',
  VIOLENCE = 'violence',
  SELF_HARM = 'self_harm',
  SPAM = 'spam',
  FAKE_NEWS = 'fake_news',
  HARASSMENT = 'harassment',
}

// Model ti·∫øng Anh
const TOXIC_API = 'https://api-inference.huggingface.co/models/unitary/toxic-bert';
const HF_API_KEY = process.env.HUGGINGFACE_API_KEY || '';

const headers = {
  Authorization: `Bearer ${HF_API_KEY}`,
  'Content-Type': 'application/json',
};

// Danh s√°ch t·ª´ v√† c·ª•m t·ª´ nh·∫°y c·∫£m ti·∫øng Vi·ªát
const sensitiveWordsList = {
  [ContentViolationType.HATE_SPEECH]: [
    'ƒë·ªãt m·∫π', 'ƒë·ªãt', 's√∫c v·∫≠t', '√≥c ch√≥', 'ƒë·ªì ngu', 'm·∫•t d·∫°y', 'ngu v√£i', 'th·∫±ng ƒëi√™n',
    'ƒë·ªì ƒëi√™n', 'b·ªë l√°o', 'ƒë·ªì th·∫ßn kinh', 'con ch√≥', 'th·∫±ng ch√≥', 'ƒë·ª•', 'ƒë·ª• m√°', 'ƒë·ª• m·∫π',
    'ƒëm', 'ƒëkm', 'ƒë·ª• m√° m√†y', 'ƒë·ªãt m·∫π m√†y', 'ƒë·ªãt m·∫π m', 'ƒë·ªãt con m·∫π'
  ],
  [ContentViolationType.SEXUAL]: [
    'khi√™u d√¢m', 'g√°i g·ªçi', 'm·∫°i d√¢m', 'cave', 'sex toy', 'xxx', 'd√¢m d·ª•c', 'b√∫ cu',
    'dick', 'cock', 'pussy', 'l·ªìn', 'c·∫∑c', 'cu', 'bu·ªìi', 'b∆∞·ªõm', 'chim'
  ],
  [ContentViolationType.VIOLENCE]: [
    'gi·∫øt ng∆∞·ªùi', 'ƒë√°nh bom', 'kh·ªßng b·ªë', 't·∫•n c√¥ng', 'ch·∫∑t ƒë·∫ßu', 'x·∫£ s√∫ng'
  ],
  [ContentViolationType.SELF_HARM]: [
    't·ª± t·ª≠', 'u·ªëng thu·ªëc ƒë·ªôc', 'c·∫Øt tay', 't·ª± s√°t'
  ],
  [ContentViolationType.SPAM]: [
    'click v√†o ƒë√¢y', 'ki·∫øm ti·ªÅn nhanh', 'vi·ªác nh·∫π l∆∞∆°ng cao', 'mua ngay', 'b√°n g·∫•p'
  ],
  [ContentViolationType.FAKE_NEWS]: [
    'tin gi·∫£', 'kh√¥ng ki·ªÉm ch·ª©ng', 'l·ª´a ƒë·∫£o', 'gi·∫£ m·∫°o'
  ],
  [ContentViolationType.HARASSMENT]: [
    'qu·∫•y r·ªëi', 'x√†m s·ª°', 's√†m s·ª°', 'theo d√µi', 'hi·∫øp d√¢m', 'fuck you', 'ass', 'bitch', 'stupid'
  ],
};

// Danh s√°ch t·ª´ ti·∫øng Anh ph·ªï bi·∫øn c·∫ßn ch·∫∑n
const englishSensitiveWords = [
  'fuck', 'shit', 'bitch', 'ass', 'dick', 'pussy', 'stupid', 'cunt', 'whore', 'slut',
  'bastard', 'asshole', 'motherfucker'
];

// H√†m ki·ªÉm tra t·ª´ nh·∫°y c·∫£m ti·∫øng Vi·ªát v√† ti·∫øng Anh b·∫±ng regex Unicode
function checkSensitiveWords(content: string): { flagged: boolean; type?: string; word?: string } {
  const lowerContent = content.toLowerCase().trim();
  
  // Ki·ªÉm tra t·ª´ng lo·∫°i vi ph·∫°m trong danh s√°ch ti·∫øng Vi·ªát
  for (const [type, words] of Object.entries(sensitiveWordsList)) {
    for (const word of words) {
      // T·∫°o regex c√≥ ranh gi·ªõi t·ª´ (boundary) ho·∫∑c ki·ªÉm tra nh∆∞ m·ªôt ph·∫ßn c·ªßa t·ª´ l·ªõn h∆°n
      const escapedWord = word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // escape regex
      // S·ª≠ d·ª•ng word boundary cho t·ª´ ƒë∆°n, ho·∫∑c t√¨m ki·∫øm ch√≠nh x√°c cho c·ª•m t·ª´
      const regex = new RegExp(`(^|\\s|[.,!?;:])${escapedWord}($|\\s|[.,!?;:])`, 'iu');
      
      if (regex.test(lowerContent)) {
        return { flagged: true, type, word };
      }
    }
  }
  
  // Ki·ªÉm tra ri√™ng danh s√°ch t·ª´ ti·∫øng Anh
  for (const word of englishSensitiveWords) {
    const escapedWord = word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const regex = new RegExp(`(^|\\s|[.,!?;:])${escapedWord}($|\\s|[.,!?;:])`, 'iu');
    
    if (regex.test(lowerContent)) {
      return { flagged: true, type: ContentViolationType.HARASSMENT, word };
    }
  }
  
  return { flagged: false };
}

// API validate
export async function GET() {
  try {
    if (!HF_API_KEY) {
      return NextResponse.json({ success: false, message: 'Missing Hugging Face API Key' }, { status: 500 });
    }

    const client = await clientPromise;
    const db = client.db();
    const posts = await db.collection('posts').find().toArray();

    const invalidPosts: {
      postId: string;
      content: string;
      label: string;
      score: number | null;
      reason?: string;
      source?: string;
      updated?: boolean;
    }[] = [];

    const updatePromises: Promise<any>[] = [];

    for (const post of posts) {
      const content = post.content?.trim();
      if (!content) continue;

      // Ki·ªÉm tra t·ª´ nh·∫°y c·∫£m tr∆∞·ªõc ti√™n, kh√¥ng ph√¢n bi·ªát ng√¥n ng·ªØ
      const sensitiveCheck = checkSensitiveWords(content);
      if (sensitiveCheck.flagged) {
        console.log(`üö´ Post ${post._id} vi ph·∫°m (${sensitiveCheck.type}): "${sensitiveCheck.word}"`);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i ƒëƒÉng trong database
        const updatePromise = db.collection('posts').updateOne(
          { _id: new ObjectId(post._id) },
          { 
            $set: { 
              status: 'flagged',
              flagInfo: {
                type: sensitiveCheck.type,
                word: sensitiveCheck.word,
                source: 'keyword',
                flaggedAt: new Date()
              }
            } 
          }
        ).then(result => ({
          postId: post._id.toString(),
          updated: result.modifiedCount > 0
        })).catch(err => {
          console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t post ${post._id}:`, err);
          return { postId: post._id.toString(), updated: false, error: err.message };
        });
        
        updatePromises.push(updatePromise);
        
        invalidPosts.push({
          postId: post._id.toString(),
          content,
          label: 'violation',
          score: 1.0,
          reason: sensitiveCheck.type,
          source: 'keyword'
        });
        
        continue; // N·∫øu ƒë√£ ph√°t hi·ªán vi ph·∫°m qua t·ª´ kh√≥a th√¨ kh√¥ng c·∫ßn ki·ªÉm tra b·∫±ng API n·ªØa
      }

      // X√°c ƒë·ªãnh ng√¥n ng·ªØ
      const lang = franc(content);

      // N·∫øu l√† ti·∫øng Vi·ªát v√† kh√¥ng ph√°t hi·ªán qua t·ª´ kh√≥a, ƒë√°nh d·∫•u an to√†n
      if (lang === 'vie') {
        console.log(`‚úÖ Post ti·∫øng Vi·ªát ${post._id} an to√†n.`);
      } else {
        // N·∫øu l√† ti·∫øng Anh ho·∫∑c ng√¥n ng·ªØ kh√°c, s·ª≠ d·ª•ng API ƒë·ªÉ ki·ªÉm tra
        try {
          const res = await axios.post(
            TOXIC_API,
            { inputs: content.toLowerCase() },
            { headers }
          );

          const results = res.data?.[0] as { label: string; score: number }[];
          const toxic = results?.find(r => r.label === 'toxic' && r.score > 0.7);

          if (toxic) {
            console.log(`üö´ Post ${post._id} b·ªã ƒë√°nh gi√° toxic (score: ${toxic.score.toFixed(2)})`);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i ƒëƒÉng trong database
            const updatePromise = db.collection('posts').updateOne(
              { _id: new ObjectId(post._id) },
              { 
                $set: { 
                  status: 'flagged',
                  flagInfo: {
                    type: 'toxic',
                    score: toxic.score,
                    source: 'toxic_bert',
                    flaggedAt: new Date()
                  }
                } 
              }
            ).then(result => ({
              postId: post._id.toString(),
              updated: result.modifiedCount > 0
            })).catch(err => {
              console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t post ${post._id}:`, err);
              return { postId: post._id.toString(), updated: false, error: err.message };
            });
            
            updatePromises.push(updatePromise);
            
            invalidPosts.push({
              postId: post._id.toString(),
              content,
              label: toxic.label,
              score: toxic.score,
              source: 'toxic_bert'
            });
          } else {
            console.log(`‚úÖ Post ${post._id} an to√†n.`);
          }
        } catch (err: any) {
          console.warn(`‚ö†Ô∏è L·ªói m√¥ h√¨nh ti·∫øng Anh v·ªõi post ${post._id}:`, err?.response?.data || err.message);
        }
      }
    }

    // ƒê·ª£i t·∫•t c·∫£ c√°c thao t√°c c·∫≠p nh·∫≠t database ho√†n th√†nh
    const updateResults = await Promise.all(updatePromises);
    
    // K·∫øt h·ª£p k·∫øt qu·∫£ c·∫≠p nh·∫≠t v·ªõi th√¥ng tin b√†i ƒëƒÉng
    for (const post of invalidPosts) {
      const updateResult = updateResults.find(r => r.postId === post.postId);
      if (updateResult) {
        post.updated = updateResult.updated;
      }
    }

    return NextResponse.json({
      success: true,
      invalidCount: invalidPosts.length,
      updatedCount: updateResults.filter(r => r.updated).length,
      invalidPosts,
      updateResults
    });
  } catch (error) {
    console.error('‚ùå L·ªói validate:', error);
    return NextResponse.json({ success: false, message: 'Server error', error: error instanceof Error ? error.message : String(error) }, { status: 500 });
  }
}